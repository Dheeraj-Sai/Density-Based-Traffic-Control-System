
AVRASM ver. 2.1.30  C:\Users\ADMIN\OneDrive\Desktop\traffic\Debug\List\lcd.asm Fri Jul 24 00:23:54 2020

C:\Users\ADMIN\OneDrive\Desktop\traffic\Debug\List\lcd.asm(1095): warning: Register r5 already defined by the .DEF directive
C:\Users\ADMIN\OneDrive\Desktop\traffic\Debug\List\lcd.asm(1096): warning: Register r4 already defined by the .DEF directive
C:\Users\ADMIN\OneDrive\Desktop\traffic\Debug\List\lcd.asm(1097): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.29 Evaluation
                 ;(C) Copyright 1998-2016 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 16.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF __lcd_x=R5
                 	.DEF __lcd_y=R4
                 	.DEF __lcd_maxx=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 006a 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x0:
000033 704f
000034 7265
000035 7461
000036 6f69      	.DB  0x4F,0x70,0x65,0x72,0x61,0x74,0x69,0x6F
000037 206e
000038 7473
000039 7461
00003a 7375      	.DB  0x6E,0x20,0x73,0x74,0x61,0x74,0x75,0x73
00003b 4f00
00003c 4556
00003d 2052
00003e 4f56      	.DB  0x0,0x4F,0x56,0x45,0x52,0x20,0x56,0x4F
00003f 544c
000040 4741
000041 2045
000042 5500      	.DB  0x4C,0x54,0x41,0x47,0x45,0x20,0x0,0x55
000043 444e
000044 5245
000045 5620
000046 4c4f      	.DB  0x4E,0x44,0x45,0x52,0x20,0x56,0x4F,0x4C
000047 4154
000048 4547
000049 0020
00004a 4f4e      	.DB  0x54,0x41,0x47,0x45,0x20,0x0,0x4E,0x4F
00004b 4d52
00004c 4c41
00004d 4f20
00004e 4550      	.DB  0x52,0x4D,0x41,0x4C,0x20,0x4F,0x50,0x45
00004f 4152
000050 4954
000051 4e4f
C:\Users\ADMIN\OneDrive\Desktop\traffic\Debug\List\lcd.asm(1142): warning: .cseg .db misalignment - padding zero byte
000052 0000      	.DB  0x52,0x41,0x54,0x49,0x4F,0x4E,0x0
                 _0x2000003:
000053 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000054 0011      	.DW  0x11
000055 0160      	.DW  _0xE
000056 0066      	.DW  _0x0*2
                 
000057 000e      	.DW  0x0E
000058 0171      	.DW  _0xE+17
000059 0077      	.DW  _0x0*2+17
                 
00005a 0011      	.DW  0x11
00005b 017f      	.DW  _0xE+31
00005c 0066      	.DW  _0x0*2
                 
00005d 000f      	.DW  0x0F
00005e 0190      	.DW  _0xE+48
00005f 0085      	.DW  _0x0*2+31
                 
000060 0011      	.DW  0x11
000061 019f      	.DW  _0xE+63
000062 0066      	.DW  _0x0*2
                 
000063 0011      	.DW  0x11
000064 01b0      	.DW  _0xE+80
000065 0094      	.DW  _0x0*2+46
                 
000066 0002      	.DW  0x02
000067 01c1      	.DW  __base_y_G100
000068 00a6      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
000069 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00006a 94f8      	CLI
00006b 27ee      	CLR  R30
00006c bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00006d e0f1      	LDI  R31,1
00006e bffb      	OUT  GICR,R31
00006f bfeb      	OUT  GICR,R30
000070 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000071 e08d      	LDI  R24,(14-2)+1
000072 e0a2      	LDI  R26,2
000073 27bb      	CLR  R27
                 __CLEAR_REG:
000074 93ed      	ST   X+,R30
000075 958a      	DEC  R24
000076 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000077 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000078 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000079 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00007a 93ed      	ST   X+,R30
00007b 9701      	SBIW R24,1
00007c f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00007d eae8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00007e e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00007f 9185      	LPM  R24,Z+
000080 9195      	LPM  R25,Z+
000081 9700      	SBIW R24,0
000082 f061      	BREQ __GLOBAL_INI_END
000083 91a5      	LPM  R26,Z+
000084 91b5      	LPM  R27,Z+
000085 9005      	LPM  R0,Z+
000086 9015      	LPM  R1,Z+
000087 01bf      	MOVW R22,R30
000088 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000089 9005      	LPM  R0,Z+
00008a 920d      	ST   X+,R0
00008b 9701      	SBIW R24,1
00008c f7e1      	BRNE __GLOBAL_INI_LOOP
00008d 01fb      	MOVW R30,R22
00008e cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00008f e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000090 bfed      	OUT  SPL,R30
000091 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000092 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000093 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000094 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000095 940c 0097 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <alcd.h>
                 ;#include <delay.h>
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <stdio.h>
                 ;void main(void){
                 ; 0000 0005 void main(void){
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0006 lcd_init(16);
000097 e1a0      	LDI  R26,LOW(16)
000098 d0b0      	RCALL _lcd_init
                 ; 0000 0007 lcd_clear();
000099 d082      	RCALL _lcd_clear
                 ; 0000 0008 DDRB = 0x01;
00009a e0e1      	LDI  R30,LOW(1)
00009b bbe7      	OUT  0x17,R30
                 ; 0000 0009 //set port B as output
                 ; 0000 000A DDRD = 0x00;
00009c e0e0      	LDI  R30,LOW(0)
00009d bbe1      	OUT  0x11,R30
                 ; 0000 000B //set port D as input
                 ; 0000 000C while (1)
                 _0x3:
                 ; 0000 000D {
                 ; 0000 000E if (PIND.5 == 1 && PIND.7 == 0)
00009e 9b85      	SBIS 0x10,5
00009f c002      	RJMP _0x7
0000a0 9b87      	SBIS 0x10,7
0000a1 c001      	RJMP _0x8
                 _0x7:
0000a2 c003      	RJMP _0x6
                 _0x8:
                 ; 0000 000F //check if the over voltage pin is high and the other is low
                 ; 0000 0010 delay_ms(100);//delay for 0.1 sec to see if the fault is still happening
0000a3 e6a4      	LDI  R26,LOW(100)
0000a4 e0b0      	LDI  R27,0
0000a5 d0ec      	RCALL _delay_ms
                 ; 0000 0011 if (PIND.5 == 1 && PIND.7 == 0)
                 _0x6:
0000a6 9b85      	SBIS 0x10,5
0000a7 c002      	RJMP _0xA
0000a8 9b87      	SBIS 0x10,7
0000a9 c001      	RJMP _0xB
                 _0xA:
0000aa c009      	RJMP _0x9
                 _0xB:
                 ; 0000 0012 //check for the fault again
                 ; 0000 0013 {
                 ; 0000 0014 lcd_clear();
0000ab d070      	RCALL _lcd_clear
                 ; 0000 0015 PORTB.0 = 1;
0000ac 9ac0      	SBI  0x18,0
                 ; 0000 0016 //activate the output and drive the relay
                 ; 0000 0017 lcd_gotoxy(0,0);
0000ad d0c7      	RCALL SUBOPT_0x0
                 ; 0000 0018 lcd_puts("Operation status");
                +
0000ae e6a0     +LDI R26 , LOW ( _0xE + ( 0 ) )
0000af e0b1     +LDI R27 , HIGH ( _0xE + ( 0 ) )
                 	__POINTW2MN _0xE,0
0000b0 d089      	RCALL _lcd_puts
                 ; 0000 0019 lcd_puts("OVER VOLTAGE ");
                +
0000b1 e7a1     +LDI R26 , LOW ( _0xE + ( 17 ) )
0000b2 e0b1     +LDI R27 , HIGH ( _0xE + ( 17 ) )
                 	__POINTW2MN _0xE,17
0000b3 d0c5      	RCALL SUBOPT_0x1
                 ; 0000 001A delay_ms(500);
                 ; 0000 001B //delay for fluctuations possibility
                 ; 0000 001C }
                 ; 0000 001D if (PIND.7 == 1 && PIND.5 == 0)
                 _0x9:
0000b4 9b87      	SBIS 0x10,7
0000b5 c002      	RJMP _0x10
0000b6 9b85      	SBIS 0x10,5
0000b7 c001      	RJMP _0x11
                 _0x10:
0000b8 c003      	RJMP _0xF
                 _0x11:
                 ; 0000 001E //check if under voltage pin is high and the other is low
                 ; 0000 001F delay_ms(100);//delay for the same purpose as before
0000b9 e6a4      	LDI  R26,LOW(100)
0000ba e0b0      	LDI  R27,0
0000bb d0d6      	RCALL _delay_ms
                 ; 0000 0020 if (PIND.7 == 1 && PIND.5 == 0)
                 _0xF:
0000bc 9b87      	SBIS 0x10,7
0000bd c002      	RJMP _0x13
0000be 9b85      	SBIS 0x10,5
0000bf c001      	RJMP _0x14
                 _0x13:
0000c0 c009      	RJMP _0x12
                 _0x14:
                 ; 0000 0021 //check the pin again
                 ; 0000 0022 {
                 ; 0000 0023 PORTB.0 = 1;
0000c1 9ac0      	SBI  0x18,0
                 ; 0000 0024 //activate the output and drive the relay
                 ; 0000 0025 lcd_clear();
0000c2 d059      	RCALL _lcd_clear
                 ; 0000 0026 lcd_gotoxy(0,0);
0000c3 d0b1      	RCALL SUBOPT_0x0
                 ; 0000 0027 lcd_puts("Operation status");
                +
0000c4 e7af     +LDI R26 , LOW ( _0xE + ( 31 ) )
0000c5 e0b1     +LDI R27 , HIGH ( _0xE + ( 31 ) )
                 	__POINTW2MN _0xE,31
0000c6 d073      	RCALL _lcd_puts
                 ; 0000 0028 lcd_puts("UNDER VOLTAGE ");
                +
0000c7 e9a0     +LDI R26 , LOW ( _0xE + ( 48 ) )
0000c8 e0b1     +LDI R27 , HIGH ( _0xE + ( 48 ) )
                 	__POINTW2MN _0xE,48
0000c9 d0af      	RCALL SUBOPT_0x1
                 ; 0000 0029 delay_ms(500);
                 ; 0000 002A //delay for fluctuations possibility
                 ; 0000 002B }
                 ; 0000 002C if (PIND.5 == 0 && PIND.7 == 0)
                 _0x12:
0000ca 9985      	SBIC 0x10,5
0000cb c002      	RJMP _0x18
0000cc 9b87      	SBIS 0x10,7
0000cd c001      	RJMP _0x19
                 _0x18:
0000ce c009      	RJMP _0x17
                 _0x19:
                 ; 0000 002D //chck if there is no under voltage or over voltage
                 ; 0000 002E {
                 ; 0000 002F PORTB.0 = 0;
0000cf 98c0      	CBI  0x18,0
                 ; 0000 0030 lcd_clear();
0000d0 d04b      	RCALL _lcd_clear
                 ; 0000 0031 lcd_gotoxy(0,0);
0000d1 d0a3      	RCALL SUBOPT_0x0
                 ; 0000 0032 lcd_puts("Operation status");
                +
0000d2 e9af     +LDI R26 , LOW ( _0xE + ( 63 ) )
0000d3 e0b1     +LDI R27 , HIGH ( _0xE + ( 63 ) )
                 	__POINTW2MN _0xE,63
0000d4 d065      	RCALL _lcd_puts
                 ; 0000 0033 lcd_puts("NORMAL OPERATION");
                +
0000d5 eba0     +LDI R26 , LOW ( _0xE + ( 80 ) )
0000d6 e0b1     +LDI R27 , HIGH ( _0xE + ( 80 ) )
                 	__POINTW2MN _0xE,80
0000d7 d062      	RCALL _lcd_puts
                 ; 0000 0034 }}}
                 _0x17:
0000d8 cfc5      	RJMP _0x3
                 _0x1C:
0000d9 cfff      	RJMP _0x1C
                 ; .FEND
                 
                 	.DSEG
                 _0xE:
000160           	.BYTE 0x61
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
0000da 931a      	ST   -Y,R17
0000db 2f1a      	MOV  R17,R26
0000dc ff14      	SBRS R17,4
0000dd c002      	RJMP _0x2000004
0000de 9aab      	SBI  0x15,3
0000df c001      	RJMP _0x2000005
                 _0x2000004:
0000e0 98ab      	CBI  0x15,3
                 _0x2000005:
0000e1 ff15      	SBRS R17,5
0000e2 c002      	RJMP _0x2000006
0000e3 9aac      	SBI  0x15,4
0000e4 c001      	RJMP _0x2000007
                 _0x2000006:
0000e5 98ac      	CBI  0x15,4
                 _0x2000007:
0000e6 ff16      	SBRS R17,6
0000e7 c002      	RJMP _0x2000008
0000e8 9aad      	SBI  0x15,5
0000e9 c001      	RJMP _0x2000009
                 _0x2000008:
0000ea 98ad      	CBI  0x15,5
                 _0x2000009:
0000eb ff17      	SBRS R17,7
0000ec c002      	RJMP _0x200000A
0000ed 9aae      	SBI  0x15,6
0000ee c001      	RJMP _0x200000B
                 _0x200000A:
0000ef 98ae      	CBI  0x15,6
                 _0x200000B:
                +
0000f0 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
0000f1 958a     +DEC R24
0000f2 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
0000f3 9aaa      	SBI  0x15,2
                +
0000f4 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
0000f5 958a     +DEC R24
0000f6 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
0000f7 98aa      	CBI  0x15,2
                +
0000f8 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
0000f9 958a     +DEC R24
0000fa f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
0000fb c077      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0000fc 93aa      	ST   -Y,R26
0000fd 81a8      	LD   R26,Y
0000fe dfdb      	RCALL __lcd_write_nibble_G100
0000ff 81e8          ld    r30,y
000100 95e2          swap  r30
000101 83e8          st    y,r30
000102 81a8      	LD   R26,Y
000103 dfd6      	RCALL __lcd_write_nibble_G100
                +
000104 ec88     +LDI R24 , LOW ( 200 )
000105 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000106 9701     +SBIW R24 , 1
000107 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000108 9621      	ADIW R28,1
000109 9508      	RET
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
00010a 931a      	ST   -Y,R17
00010b 930a      	ST   -Y,R16
00010c 2f1a      	MOV  R17,R26
00010d 810a      	LDD  R16,Y+2
00010e 2fe1      	MOV  R30,R17
00010f e0f0      	LDI  R31,0
000110 53ef      	SUBI R30,LOW(-__base_y_G100)
000111 4ffe      	SBCI R31,HIGH(-__base_y_G100)
000112 81e0      	LD   R30,Z
000113 0fe0      	ADD  R30,R16
000114 2fae      	MOV  R26,R30
000115 dfe6      	RCALL __lcd_write_data
000116 2e50      	MOV  R5,R16
000117 2e41      	MOV  R4,R17
000118 8119      	LDD  R17,Y+1
000119 8108      	LDD  R16,Y+0
00011a 9623      	ADIW R28,3
00011b 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
00011c e0a2      	LDI  R26,LOW(2)
00011d d05f      	RCALL SUBOPT_0x2
00011e e0ac      	LDI  R26,LOW(12)
00011f dfdc      	RCALL __lcd_write_data
000120 e0a1      	LDI  R26,LOW(1)
000121 d05b      	RCALL SUBOPT_0x2
000122 e0e0      	LDI  R30,LOW(0)
000123 2e4e      	MOV  R4,R30
000124 2e5e      	MOV  R5,R30
000125 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000126 931a      	ST   -Y,R17
000127 2f1a      	MOV  R17,R26
000128 301a      	CPI  R17,10
000129 f011      	BREQ _0x2000011
00012a 1457      	CP   R5,R7
00012b f040      	BRLO _0x2000010
                 _0x2000011:
00012c e0e0      	LDI  R30,LOW(0)
00012d 93ea      	ST   -Y,R30
00012e 9443      	INC  R4
00012f 2da4      	MOV  R26,R4
000130 dfd9      	RCALL _lcd_gotoxy
000131 301a      	CPI  R17,10
000132 f409      	BRNE _0x2000013
000133 c03f      	RJMP _0x2080001
                 _0x2000013:
                 _0x2000010:
000134 9453      	INC  R5
000135 9aa8      	SBI  0x15,0
000136 2fa1      	MOV  R26,R17
000137 dfc4      	RCALL __lcd_write_data
000138 98a8      	CBI  0x15,0
000139 c039      	RJMP _0x2080001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
00013a d04d      	RCALL __SAVELOCR4
00013b 019d      	MOVW R18,R26
                 _0x2000014:
00013c 01d9      	MOVW R26,R18
                +
00013d 5f2f     +SUBI R18 , LOW ( - 1 )
00013e 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
00013f 91ec      	LD   R30,X
000140 2f1e      	MOV  R17,R30
000141 30e0      	CPI  R30,0
000142 f019      	BREQ _0x2000016
000143 2fa1      	MOV  R26,R17
000144 dfe1      	RCALL _lcd_putchar
000145 cff6      	RJMP _0x2000014
                 _0x2000016:
000146 d046      	RCALL __LOADLOCR4
000147 9624      	ADIW R28,4
000148 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000149 931a      	ST   -Y,R17
00014a 2f1a      	MOV  R17,R26
00014b 9aa3      	SBI  0x14,3
00014c 9aa4      	SBI  0x14,4
00014d 9aa5      	SBI  0x14,5
00014e 9aa6      	SBI  0x14,6
00014f 9aa2      	SBI  0x14,2
000150 9aa0      	SBI  0x14,0
000151 9aa1      	SBI  0x14,1
000152 98aa      	CBI  0x15,2
000153 98a8      	CBI  0x15,0
000154 98a9      	CBI  0x15,1
000155 2e71      	MOV  R7,R17
000156 2fe1      	MOV  R30,R17
000157 58e0      	SUBI R30,-LOW(128)
                +
000158 93e0 01c3+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
00015a 2fe1      	MOV  R30,R17
00015b 54e0      	SUBI R30,-LOW(192)
                +
00015c 93e0 01c4+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
00015e e1a4      	LDI  R26,LOW(20)
00015f e0b0      	LDI  R27,0
000160 d031      	RCALL _delay_ms
000161 d01f      	RCALL SUBOPT_0x3
000162 d01e      	RCALL SUBOPT_0x3
000163 d01d      	RCALL SUBOPT_0x3
000164 e2a0      	LDI  R26,LOW(32)
000165 df74      	RCALL __lcd_write_nibble_G100
                +
000166 e980     +LDI R24 , LOW ( 400 )
000167 e091     +LDI R25 , HIGH ( 400 )
                +__DELAY_USW_LOOP :
000168 9701     +SBIW R24 , 1
000169 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 400
00016a e2a8      	LDI  R26,LOW(40)
00016b df90      	RCALL __lcd_write_data
00016c e0a4      	LDI  R26,LOW(4)
00016d df8e      	RCALL __lcd_write_data
00016e e8a5      	LDI  R26,LOW(133)
00016f df8c      	RCALL __lcd_write_data
000170 e0a6      	LDI  R26,LOW(6)
000171 df8a      	RCALL __lcd_write_data
000172 dfa9      	RCALL _lcd_clear
                 _0x2080001:
000173 9119      	LD   R17,Y+
000174 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 __base_y_G100:
0001c1           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x0:
000175 e0e0      	LDI  R30,LOW(0)
000176 93ea      	ST   -Y,R30
000177 e0a0      	LDI  R26,LOW(0)
000178 cf91      	RJMP _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
000179 dfc0      	RCALL _lcd_puts
00017a efa4      	LDI  R26,LOW(500)
00017b e0b1      	LDI  R27,HIGH(500)
00017c c015      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
00017d df7e      	RCALL __lcd_write_data
00017e e0a3      	LDI  R26,LOW(3)
00017f e0b0      	LDI  R27,0
000180 c011      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x3:
000181 e3a0      	LDI  R26,LOW(48)
000182 df57      	RCALL __lcd_write_nibble_G100
                +
000183 e980     +LDI R24 , LOW ( 400 )
000184 e091     +LDI R25 , HIGH ( 400 )
                +__DELAY_USW_LOOP :
000185 9701     +SBIW R24 , 1
000186 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 400
000187 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR4:
000188 933a      	ST   -Y,R19
                 __SAVELOCR3:
000189 932a      	ST   -Y,R18
                 __SAVELOCR2:
00018a 931a      	ST   -Y,R17
00018b 930a      	ST   -Y,R16
00018c 9508      	RET
                 
                 __LOADLOCR4:
00018d 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00018e 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00018f 8119      	LDD  R17,Y+1
000190 8108      	LD   R16,Y
000191 9508      	RET
                 
                 _delay_ms:
000192 9610      	adiw r26,0
000193 f039      	breq __delay_ms1
                 __delay_ms0:
000194 95a8      	wdr
                +
000195 ea80     +LDI R24 , LOW ( 0xFA0 )
000196 e09f     +LDI R25 , HIGH ( 0xFA0 )
                +__DELAY_USW_LOOP :
000197 9701     +SBIW R24 , 1
000198 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA0
000199 9711      	sbiw r26,1
00019a f7c9      	brne __delay_ms0
                 __delay_ms1:
00019b 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :   4 r1 :   1 r2 :   0 r3 :   0 r4 :   4 r5 :   4 r6 :   0 r7 :   2 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   7 r17:  26 r18:   5 r19:   3 r20:   0 r21:   0 r22:   2 r23:   0 
r24:  21 r25:   6 r26:  40 r27:  13 r28:   4 r29:   1 r30:  42 r31:   5 
x  :   4 y  :  24 z  :   8 
Registers used: 21 out of 35 (60.0%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   1 
adiw  :   4 and   :   0 andi  :   0 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   4 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   0 brmi  :   0 brne  :  12 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   0 
cbi   :  10 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   2 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   1 cpc   :   0 cpi   :   3 cpse  :   0 dec   :   4 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   0 inc   :   2 jmp   :  22 ld    :   7 ldd   :   6 ldi   :  62 
lds   :   0 lpm   :   7 lsl   :   0 lsr   :   0 mov   :  17 movw  :   5 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   0 
ori   :   0 out   :   8 pop   :   0 push  :   0 rcall :  40 ret   :   9 
reti  :   0 rjmp  :  33 rol   :   0 ror   :   0 sbc   :   0 sbci  :   2 
sbi   :  15 sbic  :   1 sbis  :   9 sbiw  :   8 sbr   :   0 sbrc  :   0 
sbrs  :   4 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  16 std   :   0 sts   :   2 sub   :   0 subi  :   4 swap  :   1 
tst   :   0 wdr   :   1 
Instructions used: 34 out of 116 (29.3%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000338    696    128    824   16384   5.0%
[.dseg] 0x000060 0x0001c5      0    101    101    1024   9.9%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 4 warnings
